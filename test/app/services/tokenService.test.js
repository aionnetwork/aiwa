import sinon from 'sinon';
import Web3 from 'aion-web3';

import _ from 'lodash';
import * as browserService from '../../../app/services/browserService';
import * as tokenService from '../../../app/services/tokenService';
import { convertBNToString } from '../../../app/services/numberFormatter';
import * as mocks from './services.mocks';
import AionWallet from '../../../app/apis/wallet/aionwallet';
import Wallet from '../../../app/apis/wallet/wallet';
// Import Constants
import { CONTRACT_ABI } from '../../../app/constants/tokens';

const assert = require('assert');

const privateKey = '0x336c5c68d75010d738f620fb21a04cc56234d76a7b5d9ca3088708f1c45b3161a75d1c6e59833fad80ba02cc8010c4a99787a0859941613a7ccadf9c51c15c3a';

const account = new Wallet(mocks.defaultWalletsState.wallets.currentWallet.privateKey);
const web3 = new Web3(new Web3.providers.HttpProvider(mocks.networkFullUrl));
const tokenContract = web3.eth.contract(CONTRACT_ABI).at(mocks.newTokenData.address);

describe('#fetchTokenData()', () => {
  it('It should fetch the token data based on token address and network provider', async () => {
    // Initialize Object
    const token = {
      id: 'aiwa3',
      name: 'AIWA3',
      symbol: 'AIWA',
      decimals: '18',
      granularity: '1',
      address: '0xa02210f678afce1cc5ce2eb57b5c6c12186742f71094761d7fbeea38dd3b0495',
    };

    const stubFetchTokenData = sinon.stub(tokenService, 'fetchTokenData').returns({ token });
    const output = await tokenService.fetchTokenData(
      mocks.newTokenData.address,
      mocks.networkFullUrl,
    );
    assert.equal(JSON.stringify(output.token), mocks.tokenData);
    stubFetchTokenData.restore();
  });
});

describe('#fetchTokenBalance()', () => {
  it('It should fetch the token balance based on wallet address token address and network provider', async () => {
    const amount = convertBNToString(0, 0);
    const stubFetchTokenBalance = sinon.stub(tokenService, 'fetchTokenBalance').returns(amount);
    const output = await tokenService.fetchTokenBalance(
      mocks.defaultWalletsState.wallets.currentWallet,
      mocks.newTokenData.address,
      mocks.networkFullUrl,
    );
    assert.equal(
      output,
      mocks.defaultTokensState.tokens.tokenList[
        mocks.defaultWalletsState.wallets.currentWallet.address
      ].mastery[0].balance.amount,
    );
    stubFetchTokenBalance.restore();
  });
  it('It should fetch the AION balance based on wallet address token address and network provider', async () => {
    const amount = 0;
    const stubFetchTokenBalance = sinon.stub(tokenService, 'fetchTokenBalance').returns(amount);
    const output = await tokenService.fetchTokenBalance(
      mocks.defaultWalletsState.wallets.currentWallet,
      'none',
      mocks.networkFullUrl,
    );
    assert.equal(
      output,
      mocks.defaultTokensState.tokens.tokenList[
        mocks.defaultWalletsState.wallets.currentWallet.address
      ].mastery[0].balance.amount,
    );
    stubFetchTokenBalance.restore();
  });
});

describe('#decodeERC777MethodData(data)', () => {
  it('it should able to decode transfer function of token', () => {
    const output = tokenService.decodeERC777MethodData(mocks.transferMethodData);
    assert(
      _.isEqual(output, mocks.transferMethodDecodedOutput),
      'The output should be as expected',
    );
  });
  it('it should able to decode send function of token', () => {
    const output = tokenService.decodeERC777MethodData(mocks.sendMethodData);
    assert(_.isEqual(output, mocks.sendMethodDecodedOutput), 'The output should be as expected');
  });
  it('it should return unknown when unable to decode', () => {
    const output = tokenService.decodeERC777MethodData('0x123456');
    assert(_.isEqual(output, mocks.expectedDefaultOutput), 'The output should be as expected');
  });
});

describe('#isContract(address,provider)', () => {
  it('it should be able to identify address is an account', () => {
    const code = '0x';

    const stubIsContract = sinon.stub(tokenService, 'isContract').returns(code);

    const isAccount = tokenService.isContract(mocks.accountAddress, mocks.networkFullUrl);
    assert.equal(isAccount !== '0x', false, 'Output should be as expected');
    stubIsContract.restore();
  });
  it('it should be able to identify address is a contract', () => {
    const code = '';
    const stubIsContract = sinon.stub(tokenService, 'isContract').returns(code);
    const isContract = tokenService.isContract(
      mocks.contractAddress.toString(),
      mocks.networkFullUrl,
    );
    assert.equal(isContract !== '0x', true, 'Output should be as expected');
    stubIsContract.restore();
  });
});

describe('#getNrgPrice(privateKey)', () => {
  it('Get the gasPrice ', async () => {
    const aionStub = sinon.stub(AionWallet.prototype, 'getGasPrice').returns(mocks.localGasPrice);
    const gasPrice = await tokenService.getNrgPrice(privateKey);
    assert.equal(gasPrice, mocks.localGasPrice, 'Gas price should be as expected');
    aionStub.restore();
  });
});

describe('#sendToken(sendTokenTransaction, contractAddress, privateKey, provider)', () => {
  it('Send Token', async () => {
    const stubSendToken = sinon
      .stub(tokenService, 'sendToken')
      .returns({ account, web3, tokenContract });
    const trxHash = await tokenService.sendToken(
      mocks.sendTokenTransaction,
      mocks.contractAddress,
      privateKey,
      mocks.networkFullUrl,
    );
    assert.equal(trxHash !== undefined, true, 'Send Token Failed');
    stubSendToken.restore();
  });
});

describe('#getNrgLimit(to, amount, data, selectedToken, privateKey, provider)', () => {
  it('Get NRG Limit with contract address and hex data is not given', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('state').returns({ localstate: mocks.localstate });
    const stubMessage = sinon.stub(browserService, 'sendMessage');
    mocks.selectedToken.address = mocks.contractAddress;
    const stubGetNrgLimit = sinon
      .stub(tokenService, 'getNrgLimit')
      .returns({ account, web3, tokenContract });
    const nrgLimit = await tokenService.getNrgLimit(
      mocks.sendTokenTransaction.to,
      mocks.sendTokenTransaction.amount,
      '',
      mocks.selectedToken,
      privateKey,
      mocks.networkFullUrl,
    );
    assert.equal(nrgLimit !== undefined, true, 'Fetching Nrg Limit Failed');
    stubGetNrgLimit.restore();
    stub.restore();
    stubMessage.restore();
  });
  it('Get NRG Limit with contract address and hex data is given', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('state').returns({ localstate: mocks.localstate });
    const stubMessage = sinon.stub(browserService, 'sendMessage');
    mocks.selectedToken.address = mocks.contractAddress;
    const stubGetNrgLimit = sinon
      .stub(tokenService, 'getNrgLimit')
      .returns({ account, web3, tokenContract });
    const nrgLimit = await tokenService.getNrgLimit(
      mocks.sendTokenTransaction.to,
      mocks.sendTokenTransaction.amount,
      '0x1bc',
      mocks.selectedToken,
      privateKey,
      mocks.networkFullUrl,
    );
    assert.equal(nrgLimit !== undefined, true, 'Fetching Nrg Limit Failed');
    stubGetNrgLimit.restore();
    stub.restore();
    stubMessage.restore();
  });
  it('Get NRG Limit with none token', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('state').returns({ localstate: mocks.localstate });
    const stubMessage = sinon.stub(browserService, 'sendMessage');
    const stubGetNrgLimit = sinon
      .stub(tokenService, 'getNrgLimit')
      .returns({ account, web3, tokenContract });
    const nrgLimit = await tokenService.getNrgLimit(
      mocks.sendTokenTransaction.to,
      mocks.sendTokenTransaction.amount,
      '',
      mocks.selectedToken,
      privateKey,
      mocks.networkFullUrl,
    );
    assert.equal(nrgLimit !== undefined, true, 'Fetching Nrg Limit Failed');
    stubGetNrgLimit.restore();
    stub.restore();
    stubMessage.restore();
  });
});
